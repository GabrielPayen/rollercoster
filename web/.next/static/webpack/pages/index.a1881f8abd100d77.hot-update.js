"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/utils/gpxParser.js":
/*!********************************!*\
  !*** ./src/utils/gpxParser.js ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parseGPX\": function() { return /* binding */ parseGPX; }\n/* harmony export */ });\n/* harmony import */ var gpxparser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gpxparser */ \"./node_modules/gpxparser/dist/GPXParser.min.js\");\n/* harmony import */ var gpxparser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(gpxparser__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst parseGPX = async (file)=>{\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = (event)=>{\n            try {\n                const gpx = new (gpxparser__WEBPACK_IMPORTED_MODULE_0___default())();\n                gpx.parse(event.target.result);\n                const title = gpx.tracks[0].name;\n                const points = gpx.tracks[0].points;\n                const distance = gpx.tracks[0].distance.total / 1000 // Distance in kilometers\n                ;\n                const date = points[0].time.toLocaleDateString(\"fr-FR\", {\n                    weekday: \"long\",\n                    year: \"numeric\",\n                    month: \"long\",\n                    day: \"numeric\"\n                });\n                const duration = (points[points.length - 1].time - points[0].time) / 1000 / 60;\n                const elevationData = points.map((point)=>({\n                        time: point.time,\n                        elevation: point.ele,\n                        distance\n                    }));\n                const elevationSpeedData = movingAverage(calculateElevationSpeed(points), \"elevationSpeed\", 30).map((data)=>({\n                        ...data,\n                        distance\n                    }));\n                const speedData = movingAverage(calculateSpeed(points), \"speed\", 30).map((data)=>({\n                        ...data,\n                        distance\n                    }));\n                const paceData = movingAverage(calculatePace(points), \"pace\", 30).map((data)=>({\n                        ...data,\n                        distance\n                    }));\n                const averageSpeed = distance / (duration / 60);\n                const minElevation = gpx.tracks[0].elevation.min;\n                const maxElevation = gpx.tracks[0].elevation.max;\n                const posElevation = gpx.tracks[0].elevation.pos;\n                resolve({\n                    date,\n                    title,\n                    distance,\n                    duration,\n                    elevationData,\n                    elevationSpeedData,\n                    speedData,\n                    paceData,\n                    averageSpeed,\n                    minElevation,\n                    maxElevation,\n                    posElevation,\n                    fileName: file.name\n                });\n            } catch (error) {\n                reject(error);\n            }\n        };\n        reader.onerror = ()=>{\n            reject(new Error(\"Error reading the GPX file.\"));\n        };\n        reader.readAsText(file);\n    });\n};\nfunction calculatePace(points) {\n    const paceData = [];\n    for(let i = 1; i < points.length; i++){\n        const prevPoint = points[i - 1];\n        const currPoint = points[i];\n        const time1 = new Date(prevPoint.time);\n        const time2 = new Date(currPoint.time);\n        const timeDifference = (time2 - time1) / 1000 / 60 // Time difference in minutes\n        ;\n        const distance = getDistance([\n            prevPoint.lat,\n            prevPoint.lon\n        ], [\n            currPoint.lat,\n            currPoint.lon\n        ]) // Distance in kilometers\n        ;\n        const minDistance = 0.001 // 1 meter\n        ;\n        if (timeDifference > 0 && distance > minDistance) {\n            let pace = timeDifference / distance;\n            if (pace > 300) continue; // Ignore pace > 300 min/km\n            paceData.push({\n                time: currPoint.time,\n                pace\n            });\n        }\n    }\n    return paceData;\n}\nfunction calculateElevationSpeed(points) {\n    const elevationSpeedData = [];\n    for(let i = 1; i < points.length; i++){\n        const prevPoint = points[i - 1];\n        const currPoint = points[i];\n        const time1 = new Date(prevPoint.time);\n        const time2 = new Date(currPoint.time);\n        const timeDifference = (time2 - time1) / 1000 // Time difference in s\n        ;\n        const elevationDifference = currPoint.ele - prevPoint.ele // Elevation difference in meters\n        ;\n        const elevationSpeed = elevationDifference * 60 * 60 / timeDifference // Elevation speed in m/h\n        ;\n        elevationSpeedData.push({\n            time: currPoint.time,\n            elevationSpeed\n        });\n    }\n    return elevationSpeedData;\n}\nfunction calculateSpeed(points) {\n    const speedData = [];\n    for(let i = 1; i < points.length; i++){\n        const prevPoint = points[i - 1];\n        const currPoint = points[i];\n        const time1 = new Date(prevPoint.time);\n        const time2 = new Date(currPoint.time);\n        const timeDifference = (time2 - time1) / 1000 * 60 * 60 // Time difference in minutes\n        ;\n        const distance = getDistance([\n            prevPoint.lat,\n            prevPoint.lon\n        ], [\n            currPoint.lat,\n            currPoint.lon\n        ]) // Distance in kilometers\n        ;\n        const speed = distance * timeDifference // Speed in km/h\n        ;\n        if (speed < 1000) {\n            speedData.push({\n                time: currPoint.time,\n                speed\n            });\n        }\n    }\n    return speedData;\n}\nfunction getDistance(point1, point2) {\n    const [lat1, lon1] = point1;\n    const [lat2, lon2] = point2;\n    const R = 6371 // Earth's radius in km\n    ;\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n}\nfunction movingAverage(data, valueKey, windowSize) {\n    const result = [];\n    for(let i = 0; i < data.length - windowSize + 1; i++){\n        const windowData = data.slice(i, i + windowSize);\n        const average = windowData.reduce((sum, value)=>sum + value[valueKey], 0) / windowSize;\n        result.push({\n            time: windowData[windowSize - 1].time,\n            [valueKey]: parseFloat(average.toFixed(2))\n        });\n    }\n    return result;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/gpxParser.js\n"));

/***/ })

});