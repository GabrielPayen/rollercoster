"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/utils/gpxParser.js":
/*!********************************!*\
  !*** ./src/utils/gpxParser.js ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parseGPX\": function() { return /* binding */ parseGPX; }\n/* harmony export */ });\n/* harmony import */ var gpxparser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gpxparser */ \"./node_modules/gpxparser/dist/GPXParser.min.js\");\n/* harmony import */ var gpxparser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(gpxparser__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst parseGPX = async (file)=>{\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = (event)=>{\n            try {\n                const gpx = new (gpxparser__WEBPACK_IMPORTED_MODULE_0___default())();\n                gpx.parse(event.target.result);\n                const title = gpx.tracks[0].name;\n                const points = gpx.tracks[0].points;\n                const distance = gpx.tracks[0].distance.total / 1000 // Distance in kilometers\n                ;\n                const date = points[0].time.toLocaleDateString(\"fr-FR\", {\n                    weekday: \"long\",\n                    year: \"numeric\",\n                    month: \"long\",\n                    day: \"numeric\"\n                });\n                const duration = (points[points.length - 1].time - points[0].time) / 1000 / 60;\n                const elevationData = points.map((point)=>({\n                        time: point.time,\n                        elevation: point.ele\n                    }));\n                const elevationSpeedData = movingAverage(calculateElevationSpeed(points), \"vspeed\", 30);\n                const speedData = movingAverage(calculateSpeed(points), \"speed\", 30);\n                const paceData = movingAverage(calculatePace(points), \"pace\", 30);\n                const averageSpeed = distance / (duration / 60);\n                const minElevation = gpx.tracks[0].elevation.min;\n                const maxElevation = gpx.tracks[0].elevation.max;\n                const posElevation = gpx.tracks[0].elevation.pos;\n                resolve({\n                    date,\n                    title,\n                    distance,\n                    duration,\n                    elevationData,\n                    elevationSpeedData,\n                    speedData,\n                    paceData,\n                    averageSpeed,\n                    minElevation,\n                    maxElevation,\n                    posElevation,\n                    fileName: file.name\n                });\n            } catch (error) {\n                reject(error);\n            }\n        };\n        reader.onerror = ()=>{\n            reject(new Error(\"Error reading the GPX file.\"));\n        };\n        reader.readAsText(file);\n    });\n};\nfunction calculatePace(points) {\n    const paceData = [];\n    for(let i = 1; i < points.length; i++){\n        const prevPoint = points[i - 1];\n        const currPoint = points[i];\n        const time1 = new Date(prevPoint.time);\n        const time2 = new Date(currPoint.time);\n        const timeDifference = (time2 - time1) / 1000 / 60 // Time difference in minutes\n        ;\n        const distance = getDistance([\n            prevPoint.lat,\n            prevPoint.lon\n        ], [\n            currPoint.lat,\n            currPoint.lon\n        ]) // Distance in kilometers\n        ;\n        const minDistance = 0.001 // 1 meter\n        ;\n        if (timeDifference > 0 && distance > minDistance) {\n            let pace = timeDifference / distance;\n            if (pace > 300) continue; // Ignore pace > 300 min/km\n            paceData.push({\n                time: currPoint.time,\n                pace\n            });\n        }\n    }\n    return paceData;\n}\nfunction calculateElevationSpeed(points) {\n    const elevationSpeedData = [];\n    for(let i = 1; i < points.length; i++){\n        const prevPoint = points[i - 1];\n        const currPoint = points[i];\n        const time1 = new Date(prevPoint.time);\n        const time2 = new Date(currPoint.time);\n        const timeDifference = (time2 - time1) / 1000 // Time difference in s\n        ;\n        const elevationDifference = currPoint.ele - prevPoint.ele // Elevation difference in meters\n        ;\n        const elevationSpeed = elevationDifference * 60 * 60 / timeDifference // Elevation speed in m/h\n        ;\n        elevationSpeedData.push({\n            time: currPoint.time,\n            elevationSpeed\n        });\n    }\n    return elevationSpeedData;\n}\nfunction calculateSpeed(points) {\n    const speedData = [];\n    for(let i = 1; i < points.length; i++){\n        const prevPoint = points[i - 1];\n        const currPoint = points[i];\n        const time1 = new Date(prevPoint.time);\n        const time2 = new Date(currPoint.time);\n        const timeDifference = (time2 - time1) / 1000 * 60 * 60 // Time difference in minutes\n        ;\n        const distance = getDistance([\n            prevPoint.lat,\n            prevPoint.lon\n        ], [\n            currPoint.lat,\n            currPoint.lon\n        ]) // Distance in kilometers\n        ;\n        const speed = distance * timeDifference // Speed in km/h\n        ;\n        if (speed < 1000) {\n            speedData.push({\n                time: currPoint.time,\n                speed\n            });\n        }\n    }\n    return speedData;\n}\nfunction getDistance(point1, point2) {\n    const [lat1, lon1] = point1;\n    const [lat2, lon2] = point2;\n    const R = 6371 // Earth's radius in km\n    ;\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n}\nfunction movingAverage(data, valueKey, windowSize) {\n    const result = [];\n    for(let i = 0; i < data.length - windowSize + 1; i++){\n        const windowData = data.slice(i, i + windowSize);\n        const average = windowData.reduce((sum, value)=>sum + value[valueKey], 0) / windowSize;\n        result.push({\n            time: windowData[windowSize - 1].time,\n            [valueKey]: parseFloat(average.toFixed(2))\n        });\n    }\n    return result;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TCxPQUFPLEtBQ3JDQyxLQUFLSyxHQUFHLENBQUMsT0FBUUwsS0FBS0MsRUFBRSxHQUFJLE9BQzFCRCxLQUFLSyxHQUFHLENBQUMsT0FBUUwsS0FBS0MsRUFBRSxHQUFJLE9BQzVCRCxLQUFLSSxHQUFHLENBQUNGLE9BQU8sS0FDaEJGLEtBQUtJLEdBQUcsQ0FBQ0YsT0FBTztJQUVwQixNQUFNSSxJQUFJLElBQUlOLEtBQUtPLEtBQUssQ0FBQ1AsS0FBS1EsSUFBSSxDQUFDTCxJQUFJSCxLQUFLUSxJQUFJLENBQUMsSUFBSUw7SUFDckQsT0FBT0wsSUFBSVE7QUFDYjtBQUdBLFNBQVNoRCxjQUFjbUQsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLFVBQVUsRUFBRTtJQUNqRCxNQUFNM0UsU0FBUyxFQUFFO0lBQ2pCLElBQUssSUFBSXdDLElBQUksR0FBR0EsSUFBSWlDLEtBQUsxRCxNQUFNLEdBQUc0RCxhQUFhLEdBQUduQyxJQUFLO1FBQ3JELE1BQU1vQyxhQUFhSCxLQUFLSSxLQUFLLENBQUNyQyxHQUFHQSxJQUFJbUM7UUFDckMsTUFBTUcsVUFDSkYsV0FBV0csTUFBTSxDQUFDLENBQUNDLEtBQUtDLFFBQVVELE1BQU1DLEtBQUssQ0FBQ1AsU0FBUyxFQUFFLEtBQUtDO1FBQ2hFM0UsT0FBT29ELElBQUksQ0FBQztZQUNWNUMsTUFBTW9FLFVBQVUsQ0FBQ0QsYUFBYSxFQUFFLENBQUNuRSxJQUFJO1lBQ3JDLENBQUNrRSxTQUFTLEVBQUVRLFdBQVdKLFFBQVFLLE9BQU8sQ0FBQztRQUN6QztJQUNGO0lBQ0EsT0FBT25GO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3V0aWxzL2dweFBhcnNlci5qcz9hYzU0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBncHhQYXJzZXIgZnJvbSBcImdweHBhcnNlclwiXG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tIFwiZGF0ZS1mbnNcIlxuXG5leHBvcnQgY29uc3QgcGFyc2VHUFggPSBhc3luYyAoZmlsZSkgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICByZWFkZXIub25sb2FkID0gKGV2ZW50KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBncHggPSBuZXcgZ3B4UGFyc2VyKClcbiAgICAgICAgZ3B4LnBhcnNlKGV2ZW50LnRhcmdldC5yZXN1bHQpXG5cbiAgICAgICAgY29uc3QgdGl0bGUgPSBncHgudHJhY2tzWzBdLm5hbWVcbiAgICAgICAgY29uc3QgcG9pbnRzID0gZ3B4LnRyYWNrc1swXS5wb2ludHNcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBncHgudHJhY2tzWzBdLmRpc3RhbmNlLnRvdGFsIC8gMTAwMCAvLyBEaXN0YW5jZSBpbiBraWxvbWV0ZXJzXG5cbiAgICAgICAgY29uc3QgZGF0ZSA9IHBvaW50c1swXS50aW1lLnRvTG9jYWxlRGF0ZVN0cmluZyhcImZyLUZSXCIsIHtcbiAgICAgICAgICB3ZWVrZGF5OiBcImxvbmdcIixcbiAgICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIixcbiAgICAgICAgICBtb250aDogXCJsb25nXCIsXG4gICAgICAgICAgZGF5OiBcIm51bWVyaWNcIlxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID1cbiAgICAgICAgICAocG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXS50aW1lIC0gcG9pbnRzWzBdLnRpbWUpIC8gMTAwMCAvIDYwXG5cbiAgICAgICAgY29uc3QgZWxldmF0aW9uRGF0YSA9IHBvaW50cy5tYXAoKHBvaW50KSA9PiAoe1xuICAgICAgICAgIHRpbWU6IHBvaW50LnRpbWUsXG4gICAgICAgICAgZWxldmF0aW9uOiBwb2ludC5lbGVcbiAgICAgICAgfSkpXG5cbiAgICAgICAgY29uc3QgZWxldmF0aW9uU3BlZWREYXRhID0gbW92aW5nQXZlcmFnZShjYWxjdWxhdGVFbGV2YXRpb25TcGVlZChwb2ludHMpLCBcInZzcGVlZFwiLCAzMClcbiAgICAgICAgY29uc3Qgc3BlZWREYXRhID0gbW92aW5nQXZlcmFnZShjYWxjdWxhdGVTcGVlZChwb2ludHMpLCBcInNwZWVkXCIsIDMwKVxuICAgICAgICBjb25zdCBwYWNlRGF0YSA9IG1vdmluZ0F2ZXJhZ2UoY2FsY3VsYXRlUGFjZShwb2ludHMpLCBcInBhY2VcIiwgMzApXG4gICAgICAgIFxuICAgICAgICBjb25zdCBhdmVyYWdlU3BlZWQgPSBkaXN0YW5jZSAvIChkdXJhdGlvbiAvIDYwKVxuXG4gICAgICAgIGNvbnN0IG1pbkVsZXZhdGlvbiA9IGdweC50cmFja3NbMF0uZWxldmF0aW9uLm1pblxuICAgICAgICBjb25zdCBtYXhFbGV2YXRpb24gPSBncHgudHJhY2tzWzBdLmVsZXZhdGlvbi5tYXhcbiAgICAgICAgY29uc3QgcG9zRWxldmF0aW9uID0gZ3B4LnRyYWNrc1swXS5lbGV2YXRpb24ucG9zXG5cbiAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgZGF0ZSxcbiAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICBkaXN0YW5jZSxcbiAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICBlbGV2YXRpb25EYXRhLFxuICAgICAgICAgIGVsZXZhdGlvblNwZWVkRGF0YSxcbiAgICAgICAgICBzcGVlZERhdGEsXG4gICAgICAgICAgcGFjZURhdGEsXG4gICAgICAgICAgYXZlcmFnZVNwZWVkLFxuICAgICAgICAgIG1pbkVsZXZhdGlvbixcbiAgICAgICAgICBtYXhFbGV2YXRpb24sXG4gICAgICAgICAgcG9zRWxldmF0aW9uLFxuICAgICAgICAgIGZpbGVOYW1lOiBmaWxlLm5hbWVcbiAgICAgICAgfSlcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZWFkZXIub25lcnJvciA9ICgpID0+IHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJFcnJvciByZWFkaW5nIHRoZSBHUFggZmlsZS5cIikpXG4gICAgfVxuXG4gICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSlcbiAgfSlcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlUGFjZShwb2ludHMpIHtcbiAgY29uc3QgcGFjZURhdGEgPSBbXVxuICBmb3IgKGxldCBpID0gMTsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHByZXZQb2ludCA9IHBvaW50c1tpIC0gMV1cbiAgICBjb25zdCBjdXJyUG9pbnQgPSBwb2ludHNbaV1cblxuICAgIGNvbnN0IHRpbWUxID0gbmV3IERhdGUocHJldlBvaW50LnRpbWUpXG4gICAgY29uc3QgdGltZTIgPSBuZXcgRGF0ZShjdXJyUG9pbnQudGltZSlcbiAgICBjb25zdCB0aW1lRGlmZmVyZW5jZSA9ICh0aW1lMiAtIHRpbWUxKSAvIDEwMDAgLyA2MCAvLyBUaW1lIGRpZmZlcmVuY2UgaW4gbWludXRlc1xuXG4gICAgY29uc3QgZGlzdGFuY2UgPSBnZXREaXN0YW5jZShcbiAgICAgIFtwcmV2UG9pbnQubGF0LCBwcmV2UG9pbnQubG9uXSxcbiAgICAgIFtjdXJyUG9pbnQubGF0LCBjdXJyUG9pbnQubG9uXVxuICAgICkgLy8gRGlzdGFuY2UgaW4ga2lsb21ldGVyc1xuXG4gICAgY29uc3QgbWluRGlzdGFuY2UgPSAwLjAwMSAvLyAxIG1ldGVyXG5cbiAgICBpZiAodGltZURpZmZlcmVuY2UgPiAwICYmIGRpc3RhbmNlID4gbWluRGlzdGFuY2UpIHtcbiAgICAgIGxldCBwYWNlID0gdGltZURpZmZlcmVuY2UgLyBkaXN0YW5jZVxuXG4gICAgICBpZiAocGFjZSA+IDMwMCkgY29udGludWUgLy8gSWdub3JlIHBhY2UgPiAzMDAgbWluL2ttXG5cbiAgICAgIHBhY2VEYXRhLnB1c2goe1xuICAgICAgICB0aW1lOiBjdXJyUG9pbnQudGltZSxcbiAgICAgICAgcGFjZVxuICAgICAgfSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhY2VEYXRhXG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUVsZXZhdGlvblNwZWVkKHBvaW50cykge1xuICBjb25zdCBlbGV2YXRpb25TcGVlZERhdGEgPSBbXVxuICBmb3IgKGxldCBpID0gMTsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHByZXZQb2ludCA9IHBvaW50c1tpIC0gMV1cbiAgICBjb25zdCBjdXJyUG9pbnQgPSBwb2ludHNbaV1cblxuICAgIGNvbnN0IHRpbWUxID0gbmV3IERhdGUocHJldlBvaW50LnRpbWUpXG4gICAgY29uc3QgdGltZTIgPSBuZXcgRGF0ZShjdXJyUG9pbnQudGltZSlcbiAgICBjb25zdCB0aW1lRGlmZmVyZW5jZSA9ICgodGltZTIgLSB0aW1lMSkgLyAxMDAwKSAvLyBUaW1lIGRpZmZlcmVuY2UgaW4gc1xuXG4gICAgY29uc3QgZWxldmF0aW9uRGlmZmVyZW5jZSA9IChjdXJyUG9pbnQuZWxlIC0gcHJldlBvaW50LmVsZSApIC8vIEVsZXZhdGlvbiBkaWZmZXJlbmNlIGluIG1ldGVyc1xuXG4gICAgY29uc3QgZWxldmF0aW9uU3BlZWQgPSBlbGV2YXRpb25EaWZmZXJlbmNlICogNjAgKiA2MCAvIHRpbWVEaWZmZXJlbmNlIC8vIEVsZXZhdGlvbiBzcGVlZCBpbiBtL2hcblxuICAgIGVsZXZhdGlvblNwZWVkRGF0YS5wdXNoKHtcbiAgICAgIHRpbWU6IGN1cnJQb2ludC50aW1lLFxuICAgICAgZWxldmF0aW9uU3BlZWRcbiAgICB9KVxuICB9XG4gIHJldHVybiBlbGV2YXRpb25TcGVlZERhdGFcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlU3BlZWQocG9pbnRzKSB7XG4gIGNvbnN0IHNwZWVkRGF0YSA9IFtdXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcHJldlBvaW50ID0gcG9pbnRzW2kgLSAxXVxuICAgIGNvbnN0IGN1cnJQb2ludCA9IHBvaW50c1tpXVxuXG4gICAgY29uc3QgdGltZTEgPSBuZXcgRGF0ZShwcmV2UG9pbnQudGltZSlcbiAgICBjb25zdCB0aW1lMiA9IG5ldyBEYXRlKGN1cnJQb2ludC50aW1lKVxuICAgIGNvbnN0IHRpbWVEaWZmZXJlbmNlID0gKCh0aW1lMiAtIHRpbWUxKSAvIDEwMDApICogNjAgKiA2MCAvLyBUaW1lIGRpZmZlcmVuY2UgaW4gbWludXRlc1xuXG4gICAgY29uc3QgZGlzdGFuY2UgPSBnZXREaXN0YW5jZShcbiAgICAgIFtwcmV2UG9pbnQubGF0LCBwcmV2UG9pbnQubG9uXSxcbiAgICAgIFtjdXJyUG9pbnQubGF0LCBjdXJyUG9pbnQubG9uXVxuICAgICkgLy8gRGlzdGFuY2UgaW4ga2lsb21ldGVyc1xuXG4gICAgY29uc3Qgc3BlZWQgPSBkaXN0YW5jZSAqIHRpbWVEaWZmZXJlbmNlIC8vIFNwZWVkIGluIGttL2hcblxuICAgIGlmIChzcGVlZCA8IDEwMDApIHtcbiAgICAgIHNwZWVkRGF0YS5wdXNoKHtcbiAgICAgICAgdGltZTogY3VyclBvaW50LnRpbWUsXG4gICAgICAgIHNwZWVkXG4gICAgICB9KVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3BlZWREYXRhXG59XG5cbmZ1bmN0aW9uIGdldERpc3RhbmNlKHBvaW50MSwgcG9pbnQyKSB7XG4gIGNvbnN0IFtsYXQxLCBsb24xXSA9IHBvaW50MVxuICBjb25zdCBbbGF0MiwgbG9uMl0gPSBwb2ludDJcblxuICBjb25zdCBSID0gNjM3MSAvLyBFYXJ0aCdzIHJhZGl1cyBpbiBrbVxuICBjb25zdCBkTGF0ID0gKChsYXQyIC0gbGF0MSkgKiBNYXRoLlBJKSAvIDE4MFxuICBjb25zdCBkTG9uID0gKChsb24yIC0gbG9uMSkgKiBNYXRoLlBJKSAvIDE4MFxuXG4gIGNvbnN0IGEgPVxuICAgIE1hdGguc2luKGRMYXQgLyAyKSAqIE1hdGguc2luKGRMYXQgLyAyKSArXG4gICAgTWF0aC5jb3MoKGxhdDEgKiBNYXRoLlBJKSAvIDE4MCkgKlxuICAgICAgTWF0aC5jb3MoKGxhdDIgKiBNYXRoLlBJKSAvIDE4MCkgKlxuICAgICAgTWF0aC5zaW4oZExvbiAvIDIpICpcbiAgICAgIE1hdGguc2luKGRMb24gLyAyKVxuXG4gIGNvbnN0IGMgPSAyICogTWF0aC5hdGFuMihNYXRoLnNxcnQoYSksIE1hdGguc3FydCgxIC0gYSkpXG4gIHJldHVybiBSICogY1xufVxuXG5cbmZ1bmN0aW9uIG1vdmluZ0F2ZXJhZ2UoZGF0YSwgdmFsdWVLZXksIHdpbmRvd1NpemUpIHtcbiAgY29uc3QgcmVzdWx0ID0gW11cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aCAtIHdpbmRvd1NpemUgKyAxOyBpKyspIHtcbiAgICBjb25zdCB3aW5kb3dEYXRhID0gZGF0YS5zbGljZShpLCBpICsgd2luZG93U2l6ZSlcbiAgICBjb25zdCBhdmVyYWdlID1cbiAgICAgIHdpbmRvd0RhdGEucmVkdWNlKChzdW0sIHZhbHVlKSA9PiBzdW0gKyB2YWx1ZVt2YWx1ZUtleV0sIDApIC8gd2luZG93U2l6ZVxuICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgIHRpbWU6IHdpbmRvd0RhdGFbd2luZG93U2l6ZSAtIDFdLnRpbWUsXG4gICAgICBbdmFsdWVLZXldOiBwYXJzZUZsb2F0KGF2ZXJhZ2UudG9GaXhlZCgyKSlcbiAgICB9KVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cbiJdLCJuYW1lcyI6WyJncHhQYXJzZXIiLCJmb3JtYXQiLCJwYXJzZUdQWCIsImZpbGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJldmVudCIsImdweCIsInBhcnNlIiwidGFyZ2V0IiwicmVzdWx0IiwidGl0bGUiLCJ0cmFja3MiLCJuYW1lIiwicG9pbnRzIiwiZGlzdGFuY2UiLCJ0b3RhbCIsImRhdGUiLCJ0aW1lIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwid2Vla2RheSIsInllYXIiLCJtb250aCIsImRheSIsImR1cmF0aW9uIiwibGVuZ3RoIiwiZWxldmF0aW9uRGF0YSIsIm1hcCIsInBvaW50IiwiZWxldmF0aW9uIiwiZWxlIiwiZWxldmF0aW9uU3BlZWREYXRhIiwibW92aW5nQXZlcmFnZSIsImNhbGN1bGF0ZUVsZXZhdGlvblNwZWVkIiwic3BlZWREYXRhIiwiY2FsY3VsYXRlU3BlZWQiLCJwYWNlRGF0YSIsImNhbGN1bGF0ZVBhY2UiLCJhdmVyYWdlU3BlZWQiLCJtaW5FbGV2YXRpb24iLCJtaW4iLCJtYXhFbGV2YXRpb24iLCJtYXgiLCJwb3NFbGV2YXRpb24iLCJwb3MiLCJmaWxlTmFtZSIsImVycm9yIiwib25lcnJvciIsIkVycm9yIiwicmVhZEFzVGV4dCIsImkiLCJwcmV2UG9pbnQiLCJjdXJyUG9pbnQiLCJ0aW1lMSIsIkRhdGUiLCJ0aW1lMiIsInRpbWVEaWZmZXJlbmNlIiwiZ2V0RGlzdGFuY2UiLCJsYXQiLCJsb24iLCJtaW5EaXN0YW5jZSIsInBhY2UiLCJwdXNoIiwiZWxldmF0aW9uRGlmZmVyZW5jZSIsImVsZXZhdGlvblNwZWVkIiwic3BlZWQiLCJwb2ludDEiLCJwb2ludDIiLCJsYXQxIiwibG9uMSIsImxhdDIiLCJsb24yIiwiUiIsImRMYXQiLCJNYXRoIiwiUEkiLCJkTG9uIiwiYSIsInNpbiIsImNvcyIsImMiLCJhdGFuMiIsInNxcnQiLCJkYXRhIiwidmFsdWVLZXkiLCJ3aW5kb3dTaXplIiwid2luZG93RGF0YSIsInNsaWNlIiwiYXZlcmFnZSIsInJlZHVjZSIsInN1bSIsInZhbHVlIiwicGFyc2VGbG9hdCIsInRvRml4ZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/gpxParser.js\n"));

/***/ })

});